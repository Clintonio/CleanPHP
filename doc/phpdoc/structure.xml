<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="">
  <file path="CleanPHP.php" hash="70a31d658835d1f22e7750ad929042e4" package="Default">
    <docblock line="2">
      <description>CleanPHP Core API</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="2.0"/>
    </docblock>
    <include line="80" type="Include Once" package="Default">
      <name/>
    </include>
    <include line="91" type="Include Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="31" package="CleanPHP">
      <extends/>
      <name>CleanPHP</name>
      <full_name>\CleanPHP</full_name>
      <docblock line="24">
        <description>Contains the most important functions and
functionality for the framework to load and
work</description>
        <long-description/>
        <tag line="24" name="package" description="CleanPHP"/>
      </docblock>
      <constant namespace="global" line="55" package="CleanPHP">
        <name>ONLOAD_METHOD</name>
        <full_name>ONLOAD_METHOD</full_name>
        <value>"onLoad"</value>
        <docblock line="52">
          <description>The name of the onload method for classes</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="private" line="36" namespace="global" package="Default">
        <name>$moduleFolder</name>
        <default>"/modules/"</default>
        <docblock line="33">
          <description>Location of CleanAPI main modules</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="40" namespace="global" package="Default">
        <name>$userModules</name>
        <default>array()</default>
        <docblock line="37">
          <description>User defined module folders</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="45" namespace="global" package="Default">
        <name>$loadedModules</name>
        <default>array()</default>
        <docblock line="42">
          <description>Loaded module list</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="50" namespace="global" package="Default">
        <name>$moduleSeparator</name>
        <default>"."</default>
        <docblock line="47">
          <description>Module separator</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="69" package="CleanPHP">
        <name>import</name>
        <full_name>import</full_name>
        <docblock line="61">
          <description>Load a class from a CleanAPI module.</description>
          <long-description>&lt;p&gt;If a static public method named "onLoad" is present
it will be automatically executed&lt;/p&gt;</long-description>
          <tag line="61" name="throws" description="When a class was not found" type="\ClassNotFoundException">
            <type by_reference="false">\ClassNotFoundException</type>
          </tag>
          <tag line="61" name="param" description="The class to load. Java style class name using dots to denote a package" type="String" variable="$class">
            <type by_reference="false">String</type>
          </tag>
          <tag line="61" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="127" package="CleanPHP">
        <name>moduleExists</name>
        <full_name>moduleExists</full_name>
        <docblock line="120">
          <description>Check if a given class exists on the module path with the given module
name, following the standard module name rules</description>
          <long-description/>
          <tag line="120" name="param" description="The class module being loaded" type="\class" variable="$class">
            <type by_reference="false">\class</type>
          </tag>
          <tag line="120" name="return" description="True if the module is found on the module path" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="166" package="CleanPHP">
        <name>addModulePath</name>
        <full_name>addModulePath</full_name>
        <docblock line="160">
          <description>Add a new module folder</description>
          <long-description/>
          <tag line="160" name="throws" description="" type="\FileNotFoundException">
            <type by_reference="false">\FileNotFoundException</type>
          </tag>
          <tag line="160" name="param" description="New module folder" type="String" variable="$folder">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$folder</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="188" package="CleanPHP">
      <extends>\RuntimeException</extends>
      <name>ClassNotFoundException</name>
      <full_name>\ClassNotFoundException</full_name>
      <docblock line="180">
        <description>Exception to be thrown when a class could not be found</description>
        <long-description/>
        <tag line="180" name="author" description="Clinton Alexander"/>
        <tag line="180" name="package" description="CleanPHP"/>
        <tag line="180" name="since" description="2"/>
        <tag line="180" name="version" description="1"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="195" package="CleanPHP">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="189">
          <description>Create a new class not found exception for the given class and message</description>
          <long-description/>
          <tag line="189" name="param" description="Name of class not found" type="String" variable="$class">
            <type by_reference="false">String</type>
          </tag>
          <tag line="189" name="param" description="Message for developer" type="String" variable="$message">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$class</name>
          <default/>
          <type/>
        </argument>
        <argument line="195">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="211" package="CleanPHP">
      <extends>\RuntimeException</extends>
      <name>MissingResourceException</name>
      <full_name>\MissingResourceException</full_name>
      <docblock line="201">
        <description>Exception to be thrown when an something that
should exist does not.Primarily items in the DB
Or objects</description>
        <long-description/>
        <tag line="201" name="author" description="Clinton Alexander"/>
        <tag line="201" name="package" description="CleanPHP"/>
        <tag line="201" name="since" description="2"/>
        <tag line="201" name="version" description="1"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="global" line="223" package="CleanPHP">
      <extends>\MissingResourceException</extends>
      <name>MissingIndexException</name>
      <full_name>\MissingIndexException</full_name>
      <docblock line="213">
        <description>Exception to be thrown when an something that
should exist does not.</description>
        <long-description>&lt;p&gt;Primarily array indexes
in associative arrays&lt;/p&gt;</long-description>
        <tag line="213" name="author" description="Clinton Alexander"/>
        <tag line="213" name="package" description="CleanPHP"/>
        <tag line="213" name="since" description="2"/>
        <tag line="213" name="version" description="1"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="global" line="233" package="CleanPHP">
      <extends>\RuntimeException</extends>
      <name>ResourceUpdateException</name>
      <full_name>\ResourceUpdateException</full_name>
      <docblock line="225">
        <description>Resource update failure</description>
        <long-description/>
        <tag line="225" name="author" description="Clinton Alexander"/>
        <tag line="225" name="package" description="CleanPHP"/>
        <tag line="225" name="since" description="2"/>
        <tag line="225" name="version" description="1"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="global" line="243" package="CleanPHP">
      <extends>\RuntimeException</extends>
      <name>PermissionsException</name>
      <full_name>\PermissionsException</full_name>
      <docblock line="235">
        <description>Permissions failure</description>
        <long-description/>
        <tag line="235" name="author" description="Clinton Alexander"/>
        <tag line="235" name="package" description="CleanPHP"/>
        <tag line="235" name="since" description="2"/>
        <tag line="235" name="version" description="1"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="global" line="253" package="CleanPHP">
      <extends>\InvalidArgumentException</extends>
      <name>FormValidatorException</name>
      <full_name>\FormValidatorException</full_name>
      <docblock line="245">
        <description>Form validation exception</description>
        <long-description/>
        <tag line="245" name="author" description="Clinton Alexander"/>
        <tag line="245" name="package" description="CleanPHP"/>
        <tag line="245" name="since" description="2"/>
        <tag line="245" name="version" description="1"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="global" line="263" package="CleanPHP">
      <extends>\RuntimeException</extends>
      <name>UnexpectedFieldException</name>
      <full_name>\UnexpectedFieldException</full_name>
      <docblock line="255">
        <description>Unexpected field exception</description>
        <long-description/>
        <tag line="255" name="author" description="Clinton Alexander"/>
        <tag line="255" name="package" description="CleanPHP"/>
        <tag line="255" name="since" description="2"/>
        <tag line="255" name="version" description="1"/>
      </docblock>
    </class>
  </file>
  <file path="modules/config/Config.php" hash="cc079e9ef0b85d52151fffea5afe9137" package="Default">
    <docblock line="2">
      <description>Configuration class interface</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="3.0"/>
    </docblock>
    <interface namespace="global" line="16" package="config">
      <name>Config</name>
      <full_name>\Config</full_name>
      <docblock line="11">
        <description>Configuration interface</description>
        <long-description/>
        <tag line="11" name="package" description="config"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="config">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="22">
          <description>Loads a config file into the memory</description>
          <long-description/>
          <tag line="22" name="throws" description="Configuration file is missing" type="\MissingConfigException">
            <type by_reference="false">\MissingConfigException</type>
          </tag>
          <tag line="22" name="param" description="Location of config file" type="String" variable="$configLocation">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$configLocation</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="config">
        <name>getConfig</name>
        <full_name>getConfig</full_name>
        <docblock line="34">
          <description>Get a config value</description>
          <long-description/>
          <tag line="34" name="throws" description="When a configuration is missing" type="\MissingConfigException">
            <type by_reference="false">\MissingConfigException</type>
          </tag>
          <tag line="34" name="param" description="Config name" type="String" variable="$name">
            <type by_reference="false">String</type>
          </tag>
          <tag line="34" name="return" description="Config Value" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="54" package="config">
        <name>setConfig</name>
        <full_name>setConfig</full_name>
        <docblock line="47">
          <description>Set a config value and write to disk</description>
          <long-description/>
          <tag line="47" name="param" description="Config name" type="String" variable="$name">
            <type by_reference="false">String</type>
          </tag>
          <tag line="47" name="param" description="Config value" type="String" variable="$value">
            <type by_reference="false">String</type>
          </tag>
          <tag line="47" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="54">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="63" package="config">
        <name>setTempConfig</name>
        <full_name>setTempConfig</full_name>
        <docblock line="56">
          <description>Set a config value and do not write to disk</description>
          <long-description/>
          <tag line="56" name="param" description="Config name" type="String" variable="$name">
            <type by_reference="false">String</type>
          </tag>
          <tag line="56" name="param" description="Config value" type="String" variable="$value">
            <type by_reference="false">String</type>
          </tag>
          <tag line="56" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="63">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="modules/config/ConfigJSON.php" hash="aa17c461800a6baf02b9b855e7b9bfac" package="Default">
    <docblock line="2">
      <description>Configuration accessing class for JSON based configuration files</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="2.0"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="config">
      <extends/>
      <implements>\Config</implements>
      <name>ConfigJSON</name>
      <full_name>\ConfigJSON</full_name>
      <docblock line="13">
        <description>A configuration implementation for JSON configuration files</description>
        <long-description/>
        <tag line="13" name="package" description="config"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="22" namespace="global" package="Default">
        <name>$configArray</name>
        <default>array()</default>
        <docblock line="19">
          <description>All Config values</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="27" namespace="global" package="Default">
        <name>$location</name>
        <default/>
        <docblock line="24">
          <description>Config file location</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="config">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="33">
          <description>Loads a config file into the memory</description>
          <long-description/>
          <tag line="33" name="throws" description="Configuration file is missing" type="\MissingConfigException">
            <type by_reference="false">\MissingConfigException</type>
          </tag>
          <tag line="33" name="param" description="Location of config file" type="String" variable="$configLocation">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$configLocation</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="72" package="config">
        <name>createConfigFile</name>
        <full_name>createConfigFile</full_name>
        <docblock line="63">
          <description>Creates an empty config file at the given location, erasing any existing ones
then returns it as a new config object</description>
          <long-description/>
          <tag line="63" name="throws" description="When the existing file can't be removed, or the&#10;&#9;&#9;&#9;&#9;&#9;&#9;the new one can't be written" type="\IOException">
            <type by_reference="false">\IOException</type>
          </tag>
          <tag line="63" name="param" description="The location of the new config" type="\file" variable="$file">
            <type by_reference="false">\file</type>
          </tag>
          <tag line="63" name="return" description="new config file" type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$file</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="95" package="config">
        <name>getConfig</name>
        <full_name>getConfig</full_name>
        <docblock line="88">
          <description>Get a config value</description>
          <long-description/>
          <tag line="88" name="throws" description="When a configuration is missing" type="\MissingConfigException">
            <type by_reference="false">\MissingConfigException</type>
          </tag>
          <tag line="88" name="param" description="Config name" type="String" variable="$name">
            <type by_reference="false">String</type>
          </tag>
          <tag line="88" name="return" description="Config Value" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="115" package="config">
        <name>setConfig</name>
        <full_name>setConfig</full_name>
        <docblock line="108">
          <description>Set a config value and write to disk</description>
          <long-description/>
          <tag line="108" name="param" description="Config name" type="String" variable="$name">
            <type by_reference="false">String</type>
          </tag>
          <tag line="108" name="param" description="Config value" type="String" variable="$value">
            <type by_reference="false">String</type>
          </tag>
          <tag line="108" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="115">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="130" package="config">
        <name>setTempConfig</name>
        <full_name>setTempConfig</full_name>
        <docblock line="123">
          <description>Set a config value and do not write to disk</description>
          <long-description/>
          <tag line="123" name="param" description="Config name" type="String" variable="$name">
            <type by_reference="false">String</type>
          </tag>
          <tag line="123" name="param" description="Config value" type="String" variable="$value">
            <type by_reference="false">String</type>
          </tag>
          <tag line="123" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="130">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="130">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="global" line="147" package="config">
        <name>parseConfigFile</name>
        <full_name>parseConfigFile</full_name>
        <docblock line="141">
          <description>Parses a config file into array</description>
          <long-description/>
          <tag line="141" name="param" description="Config file string" type="String" variable="$config">
            <type by_reference="false">String</type>
          </tag>
          <tag line="141" name="return" description="Config name=&gt;value array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$config</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="modules/config/MissingConfigException.php" hash="67274a8311fa138b1f4b870b9f5819fb" package="Default">
    <docblock line="2">
      <description>Missing Config Exception</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="config">
      <extends>\MissingResourceException</extends>
      <name>MissingConfigException</name>
      <full_name>\MissingConfigException</full_name>
      <docblock line="9">
        <description>Missing configuration exception</description>
        <long-description/>
        <tag line="9" name="package" description="config"/>
      </docblock>
    </class>
  </file>
  <file path="modules/core/Cookie.php" hash="98a1bd7befc184bdd8cea2fc9a36c44b" package="Default">
    <docblock line="2">
      <description>Cookie class for accessing cookies in an object oriented manner</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="core">
      <extends/>
      <name>Cookie</name>
      <full_name>\Cookie</full_name>
      <docblock line="9">
        <description>Object oriented cookie class</description>
        <long-description/>
        <tag line="9" name="package" description="core"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="18" namespace="global" package="Default">
        <name>$name</name>
        <default/>
        <docblock line="15">
          <description>Name of cookie in the $_COOKIE array</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="22" namespace="global" package="Default">
        <name>$value</name>
        <default/>
        <docblock line="19">
          <description>Value of the cookie</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$expire</name>
        <default>0</default>
        <docblock line="23">
          <description>When the cookie is to expire in UTC time</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="30" namespace="global" package="Default">
        <name>$path</name>
        <default>"/"</default>
        <docblock line="27">
          <description>Path on which the cookie is valid</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="34" namespace="global" package="Default">
        <name>$domain</name>
        <default/>
        <docblock line="31">
          <description>Domain on which the cookie is valid, default HTTP_HOST</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="38" namespace="global" package="Default">
        <name>$secure</name>
        <default>false</default>
        <docblock line="35">
          <description>Whether the cookie is a HTTPS cookie</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="42" namespace="global" package="Default">
        <name>$httpOnly</name>
        <default>false</default>
        <docblock line="39">
          <description>Whether the cookie can be edited by Javascript or HTTP only</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="49" package="core">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="44">
          <description>Create a new cookie</description>
          <long-description/>
          <tag line="44" name="param" description="Name of cookie" type="String" variable="$name">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="59" package="core">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="54">
          <description>Get the value of this cookie</description>
          <long-description/>
          <tag line="54" name="return" description="Cookie value" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="75" package="core">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="70">
          <description>Set the value for this cookie</description>
          <long-description/>
          <tag line="70" name="param" description="New value" type="String" variable="$value">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="core">
        <name>setExpire</name>
        <full_name>setExpire</full_name>
        <docblock line="88">
          <description>Set the expire time for this cookie</description>
          <long-description/>
          <tag line="88" name="param" description="time&#9;&#9;&#9;&#9;&#9;[default=0]" type="\Expire" variable="$expire">
            <type by_reference="false">\Expire</type>
          </tag>
          <tag line="88" name="return" description="object for building" type="\This">
            <type by_reference="false">\This</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$expire</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="106" package="core">
        <name>setPath</name>
        <full_name>setPath</full_name>
        <docblock line="100">
          <description>Set the path for this cookie</description>
          <long-description/>
          <tag line="100" name="param" description="for this cookie&#9;&#9;[default=&quot;/&quot;]" type="\Path" variable="$path">
            <type by_reference="false">\Path</type>
          </tag>
          <tag line="100" name="return" description="object for building" type="\This">
            <type by_reference="false">\This</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$path</name>
          <default>"/"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="118" package="core">
        <name>setDomain</name>
        <full_name>setDomain</full_name>
        <docblock line="112">
          <description>Set the domain for this cookie</description>
          <long-description/>
          <tag line="112" name="param" description="for this cookie" type="\Domain" variable="$domain">
            <type by_reference="false">\Domain</type>
          </tag>
          <tag line="112" name="return" description="object for building" type="\This">
            <type by_reference="false">\This</type>
          </tag>
        </docblock>
        <argument line="118">
          <name>$domain</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="130" package="core">
        <name>setSecure</name>
        <full_name>setSecure</full_name>
        <docblock line="124">
          <description>Set whether this cookie is secure or not</description>
          <long-description/>
          <tag line="124" name="param" description="True if this cookie is secure" type="Boolean" variable="$secure">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag line="124" name="return" description="object for building" type="\This">
            <type by_reference="false">\This</type>
          </tag>
        </docblock>
        <argument line="130">
          <name>$secure</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="142" package="core">
        <name>setHttpOnly</name>
        <full_name>setHttpOnly</full_name>
        <docblock line="136">
          <description>Set the HTTP only status of this cookie</description>
          <long-description/>
          <tag line="136" name="param" description="True if HTTP only/ no javascript for this cookie" type="Boolean" variable="$httpOnly">
            <type by_reference="false">Boolean</type>
          </tag>
          <tag line="136" name="return" description="object for building" type="\This">
            <type by_reference="false">\This</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$httpOnly</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="modules/core/Session.php" hash="e4d1b0e4c1bd5fdea7c710ab5c0beede" package="Default">
    <docblock line="2">
      <description>A class representing session data with some useful environment accessors</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="core">
      <extends/>
      <name>Session</name>
      <full_name>\Session</full_name>
      <docblock line="9">
        <description>Session object oriented interface with token management</description>
        <long-description/>
        <tag line="9" name="package" description="core"/>
      </docblock>
      <constant namespace="global" line="23" package="core">
        <name>SESSION_TOKEN_LIFESPAN</name>
        <full_name>SESSION_TOKEN_LIFESPAN</full_name>
        <value>300</value>
        <docblock line="20">
          <description>Session token length in seconds</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="27" package="core">
        <name>TOKEN_INDEX</name>
        <full_name>TOKEN_INDEX</full_name>
        <value>'cleanphp_token'</value>
        <docblock line="24">
          <description>Token field name</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="31" package="core">
        <name>TOKEN_EXPIRE_INDEX</name>
        <full_name>TOKEN_EXPIRE_INDEX</full_name>
        <value>'cleanphp_sess_expire'</value>
        <docblock line="28">
          <description>Expire time field name</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="private" line="18" namespace="global" package="Default">
        <name>$ip</name>
        <default/>
        <docblock line="15">
          <description>Current user's IP</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="37" package="core">
        <name>onLoad</name>
        <full_name>onLoad</full_name>
        <docblock line="33">
          <description>Called when this class is loaded by CleanPHP
And begins the session</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="53" package="core">
        <name>getIP</name>
        <full_name>getIP</full_name>
        <docblock line="48">
          <description>Get IP of current session</description>
          <long-description/>
          <tag line="48" name="return" description="IP" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="62" package="core">
        <name>getToken</name>
        <full_name>getToken</full_name>
        <docblock line="57">
          <description>Get the session token</description>
          <long-description/>
          <tag line="57" name="return" description="Session token" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="71" package="core">
        <name>getTokenExpireTime</name>
        <full_name>getTokenExpireTime</full_name>
        <docblock line="66">
          <description>Get the session expire time</description>
          <long-description/>
          <tag line="66" name="return" description="Session expire timestamp" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="global" line="78" package="core">
        <name>updateToken</name>
        <full_name>updateToken</full_name>
        <docblock line="75">
          <description>Update the user's session token</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="92" package="core">
        <name>isTokenValid</name>
        <full_name>isTokenValid</full_name>
        <docblock line="87">
          <description>Check if the given token is valid</description>
          <long-description/>
          <tag line="87" name="param" description="token&#9;Value to check against" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$token</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="modules/core/String.php" hash="aab21267bf0096a64eb07055a53f8f25" package="Default">
    <docblock line="2">
      <description>A PHP based simple OO string with convenience functions</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="core">
      <extends/>
      <name>String</name>
      <full_name>\String</full_name>
      <docblock line="9">
        <description>String class for object oriented string access</description>
        <long-description/>
        <tag line="9" name="package" description="core"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="18" namespace="global" package="Default">
        <name>$str</name>
        <default/>
        <docblock line="15">
          <description>The raw string this object represents</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="25" package="core">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="20">
          <description>Construct a new String</description>
          <long-description/>
          <tag line="20" name="param" description="The string to construct" type="String" variable="$string">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$string</name>
          <default>""</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="32" package="core">
        <name>onLoad</name>
        <full_name>onLoad</full_name>
        <docblock line="29">
          <description>On loading, set the internal encoding to UTF8</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="core">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="40">
          <description>To string</description>
          <long-description/>
          <tag line="40" name="return" description="value of this string" type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="56" package="core">
        <name>equals</name>
        <full_name>equals</full_name>
        <docblock line="49">
          <description>Checking equality between this string and another object.</description>
          <long-description>&lt;p&gt;For checking if the string &lt;em&gt;objects&lt;/em&gt; are identical use ===&lt;/p&gt;</long-description>
          <tag line="49" name="param" description="value&#9;The value we are comparing" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="49" name="return" description="the other value evaluates to the string value of this string" type="\Whether">
            <type by_reference="false">\Whether</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="65" package="core">
        <name>asInt</name>
        <full_name>asInt</full_name>
        <docblock line="60">
          <description>Parse the integer value that this string represents</description>
          <long-description/>
          <tag line="60" name="return" description="Value this string represents" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="74" package="core">
        <name>asDouble</name>
        <full_name>asDouble</full_name>
        <docblock line="69">
          <description>Parse the double value that this string represents</description>
          <long-description/>
          <tag line="69" name="return" description="Value this string represents" type="double">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="83" package="core">
        <name>asFloat</name>
        <full_name>asFloat</full_name>
        <docblock line="78">
          <description>Parse the float value that this string represents</description>
          <long-description/>
          <tag line="78" name="return" description="Value that this string represents" type="double">
            <type by_reference="false">double</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="92" package="core">
        <name>asBoolean</name>
        <full_name>asBoolean</full_name>
        <docblock line="87">
          <description>Parse the boolean value that this string represents</description>
          <long-description/>
          <tag line="87" name="return" description="Value this string represents" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="101" package="core">
        <name>asBool</name>
        <full_name>asBool</full_name>
        <docblock line="96">
          <description>Parse the boolean value that this string represents</description>
          <long-description/>
          <tag line="96" name="return" description="Value this string represents" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="core">
        <name>length</name>
        <full_name>length</full_name>
        <docblock line="109">
          <description>Get the length of the string</description>
          <long-description/>
          <tag line="109" name="return" description="Length of the string" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="124" package="core">
        <name>append</name>
        <full_name>append</full_name>
        <docblock line="118">
          <description>Append a string to this string</description>
          <long-description/>
          <tag line="118" name="param" description="String to append" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="118" name="return" description="Resulting new string" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="134" package="core">
        <name>prepend</name>
        <full_name>prepend</full_name>
        <docblock line="128">
          <description>Prepend a string to this string</description>
          <long-description/>
          <tag line="128" name="param" description="String to Prepend" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="128" name="return" description="Resulting new string" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="134">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="151" package="core">
        <name>replace</name>
        <full_name>replace</full_name>
        <docblock line="142">
          <description>Replace one or more values with one or more others.</description>
          <long-description>&lt;p&gt;Identical to
str_replace&lt;/p&gt;</long-description>
          <tag line="142" name="param" description="The elements to search for" type="Mixed" variable="$find">
            <type by_reference="false">Mixed</type>
          </tag>
          <tag line="142" name="param" description="The elements to replace" type="Mixed" variable="$replace">
            <type by_reference="false">Mixed</type>
          </tag>
          <tag line="142" name="param" description="Maximum number of replacements. 0 is unlimited [default=0]" type="int" variable="$max">
            <type by_reference="false">int</type>
          </tag>
          <tag line="142" name="return" description="The new string value" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="151">
          <name>$find</name>
          <default/>
          <type/>
        </argument>
        <argument line="151">
          <name>$replace</name>
          <default/>
          <type/>
        </argument>
        <argument line="151">
          <name>$max</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="161" package="core">
        <name>htmlEncode</name>
        <full_name>htmlEncode</full_name>
        <docblock line="155">
          <description>Encodes the string to be HTML safe
Alias for htmlspecialchars</description>
          <long-description/>
          <tag line="155" name="return" description="HTML safe string" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="177" package="core">
        <name>substring</name>
        <full_name>substring</full_name>
        <docblock line="169">
          <description>Returns a substring of this string in the same manner
to PHP's substring</description>
          <long-description/>
          <tag line="169" name="param" description="Start position" type="int" variable="$start">
            <type by_reference="false">int</type>
          </tag>
          <tag line="169" name="param" description="Length (default = 0/unlimited)" type="int" variable="$length">
            <type by_reference="false">int</type>
          </tag>
          <tag line="169" name="return" description="Substring of this string" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="177">
          <name>$start</name>
          <default/>
          <type/>
        </argument>
        <argument line="177">
          <name>$length</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="188" package="core">
        <name>split</name>
        <full_name>split</full_name>
        <docblock line="181">
          <description>Returns a string split into pieces by a separator</description>
          <long-description/>
          <tag line="181" name="param" description="Separator" type="string" variable="$separator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="181" name="param" description="(Optional) Limit" type="int" variable="$limit">
            <type by_reference="false">int</type>
          </tag>
          <tag line="181" name="return" description="This string split by the given separator" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="188">
          <name>$separator</name>
          <default/>
          <type/>
        </argument>
        <argument line="188">
          <name>$limit</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="206" package="core">
        <name>trim</name>
        <full_name>trim</full_name>
        <docblock line="203">
          <description>Trim a string to remove whitepsace either side of string</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="222" package="core">
        <name>trunc</name>
        <full_name>trunc</full_name>
        <docblock line="215">
          <description>Truncates a string to a certain length</description>
          <long-description/>
          <tag line="215" name="param" description="Limit to truncase up to&#9;[" type="Int" variable="$limit">
            <type by_reference="false">Int</type>
          </tag>
          <tag line="215" name="param" description="The end to append" type="String" variable="$ending">
            <type by_reference="false">String</type>
          </tag>
          <tag line="215" name="return" description="Truncated string" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="222">
          <name>$limit</name>
          <default/>
          <type/>
        </argument>
        <argument line="222">
          <name>$ending</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="243" package="core">
        <name>truncate</name>
        <full_name>truncate</full_name>
        <docblock line="236">
          <description>Truncates a string to a certain length</description>
          <long-description/>
          <tag line="236" name="param" description="Limit to truncase up to&#9;[" type="Int" variable="$limit">
            <type by_reference="false">Int</type>
          </tag>
          <tag line="236" name="param" description="The end to append" type="String" variable="$ending">
            <type by_reference="false">String</type>
          </tag>
          <tag line="236" name="return" description="Truncated string" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="243">
          <name>$limit</name>
          <default/>
          <type/>
        </argument>
        <argument line="243">
          <name>$ending</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="modules/database/Database.php" hash="08caa679c33a9a19cd8aa9721ab3eadc" package="Default">
    <docblock line="2">
      <description>An interface for abstract database representation</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <interface namespace="global" line="14" package="database">
      <name>Database</name>
      <full_name>\Database</full_name>
      <docblock line="9">
        <description>Abstract database representation</description>
        <long-description/>
        <tag line="9" name="package" description="database"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="23" package="database">
        <name>getQueryNumeric</name>
        <full_name>getQueryNumeric</full_name>
        <docblock line="16">
          <description>Gets numeric ordered query (no field names)</description>
          <long-description/>
          <tag line="16" name="throws" description="When a query fails" type="\DatabaseQueryException">
            <type by_reference="false">\DatabaseQueryException</type>
          </tag>
          <tag line="16" name="param" description="Query to be sent" type="String" variable="$query">
            <type by_reference="false">String</type>
          </tag>
          <tag line="16" name="return" description="array of results" type="\Numeric">
            <type by_reference="false">\Numeric</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="database">
        <name>getQuery</name>
        <full_name>getQuery</full_name>
        <docblock line="25">
          <description>Gets an associative query</description>
          <long-description/>
          <tag line="25" name="throws" description="When a query fails" type="\DatabaseQueryException">
            <type by_reference="false">\DatabaseQueryException</type>
          </tag>
          <tag line="25" name="param" description="Query to be sent" type="String" variable="$query">
            <type by_reference="false">String</type>
          </tag>
          <tag line="25" name="return" description="of results" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="database">
        <name>sendQuery</name>
        <full_name>sendQuery</full_name>
        <docblock line="34">
          <description>Send a query with a boolean response such as INSERT</description>
          <long-description/>
          <tag line="34" name="throws" description="When a query fails" type="\DatabaseQueryException">
            <type by_reference="false">\DatabaseQueryException</type>
          </tag>
          <tag line="34" name="param" description="Query to be sent" type="String" variable="$query">
            <type by_reference="false">String</type>
          </tag>
          <tag line="34" name="return" description="or false depending on result of query" type="True">
            <type by_reference="false">True</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="48" package="database">
        <name>getAffectedRows</name>
        <full_name>getAffectedRows</full_name>
        <docblock line="43">
          <description>Get the number of affected rows</description>
          <long-description/>
          <tag line="43" name="return" description="of affected rows" type="\Number">
            <type by_reference="false">\Number</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="55" package="database">
        <name>getInsertID</name>
        <full_name>getInsertID</full_name>
        <docblock line="50">
          <description>Get the ID of the last insert</description>
          <long-description/>
          <tag line="50" name="return" description="insert ID" type="\Last">
            <type by_reference="false">\Last</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="62" package="database">
        <name>closeConnection</name>
        <full_name>closeConnection</full_name>
        <docblock line="57">
          <description>Closes the connection</description>
          <long-description/>
          <tag line="57" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="71" package="database">
        <name>clean</name>
        <full_name>clean</full_name>
        <docblock line="64">
          <description>Clean the input data value to prevent it causing
injections</description>
          <long-description/>
          <tag line="64" name="param" description="Input data (Not a query statement)" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="return" description="Clean input data" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="modules/database/DatabaseConnectionException.php" hash="75ca25bd7e27b9c3af148b85f5602f9b" package="Default">
    <docblock line="2">
      <description>Exception thrown when database cannot be connected to</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="database">
      <extends>\RuntimeException</extends>
      <name>DatabaseConnectionException</name>
      <full_name>\DatabaseConnectionException</full_name>
      <docblock line="9">
        <description>Database exception thrown when the database can't be connected to</description>
        <long-description/>
        <tag line="9" name="package" description="database"/>
      </docblock>
    </class>
  </file>
  <file path="modules/database/DatabaseQueryException.php" hash="40617ba812908bb21043a576e851c060" package="Default">
    <docblock line="2">
      <description>Exception thrown when a query fails</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="database">
      <extends>\RuntimeException</extends>
      <name>DatabaseQueryException</name>
      <full_name>\DatabaseQueryException</full_name>
      <docblock line="9">
        <description>Exception that is thrown when a query is invalid</description>
        <long-description/>
        <tag line="9" name="package" description="database"/>
      </docblock>
    </class>
  </file>
  <file path="modules/database/mysqli/MySQLiDatabase.php" hash="e31b0fc9b5747572d1402015fdca7f51" package="Default">
    <docblock line="2">
      <description>MySQLi class wrapper for the Database interface</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="3.0"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="20" package="database\mysqli">
      <extends/>
      <implements>\Database</implements>
      <name>MySQLiDatabase</name>
      <full_name>\MySQLiDatabase</full_name>
      <docblock line="13">
        <description>Each database instance holds onto a single connection
and acts as a wrapper to MySQLi intending to
abstract out the PHP mess</description>
        <long-description/>
        <tag line="13" name="package" description="database\mysqli"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="24" namespace="global" package="Default">
        <name>$queries</name>
        <default>array()</default>
        <docblock line="21">
          <description>A store of all queries run during this session</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="28" namespace="global" package="Default">
        <name>$queryCount</name>
        <default>0</default>
        <docblock line="25">
          <description>A counter of the number of queries run during this session</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="33" namespace="global" package="Default">
        <name>$mySQLi</name>
        <default/>
        <docblock line="30">
          <description>Current MySQLi connection</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="43" package="database\mysqli">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="35">
          <description>Create a new MySQLi database with the given connection details</description>
          <long-description/>
          <tag line="35" name="param" description="Username for database" type="String" variable="$username">
            <type by_reference="false">String</type>
          </tag>
          <tag line="35" name="param" description="Password for database" type="String" variable="$password">
            <type by_reference="false">String</type>
          </tag>
          <tag line="35" name="param" description="Database name" type="String" variable="$dbname">
            <type by_reference="false">String</type>
          </tag>
          <tag line="35" name="param" description="Host of database" type="String" variable="$host">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$username</name>
          <default/>
          <type/>
        </argument>
        <argument line="43">
          <name>$password</name>
          <default/>
          <type/>
        </argument>
        <argument line="43">
          <name>$dbname</name>
          <default/>
          <type/>
        </argument>
        <argument line="43">
          <name>$host</name>
          <default>"localhost"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="database\mysqli">
        <name>sendQuery</name>
        <full_name>sendQuery</full_name>
        <docblock line="57">
          <description>Database query
Sends a query.</description>
          <long-description>&lt;p&gt;Does not return a result. Just true or false
Intended for non-select queries.&lt;/p&gt;</long-description>
          <tag line="57" name="throws" description="When the query is invalid" type="\DatabaseQueryException">
            <type by_reference="false">\DatabaseQueryException</type>
          </tag>
          <tag line="57" name="param" description="SQL query to execute" type="String" variable="$query">
            <type by_reference="false">String</type>
          </tag>
          <tag line="57" name="return" description="Result of query" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="102" package="database\mysqli">
        <name>getQuery</name>
        <full_name>getQuery</full_name>
        <docblock line="94">
          <description>Database Query
Returns all results as an associative array</description>
          <long-description/>
          <tag line="94" name="throws" description="When a query is invalid" type="\DatabaseQueryException">
            <type by_reference="false">\DatabaseQueryException</type>
          </tag>
          <tag line="94" name="param" description="query&#9;&#9;MySQL Query to execute" type="string" variable="$query">
            <type by_reference="false">string</type>
          </tag>
          <tag line="94" name="return" description="Array of results or false" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="database\mysqli">
        <name>getQueryNumeric</name>
        <full_name>getQueryNumeric</full_name>
        <docblock line="106">
          <description>Database query
Returns a numeric array</description>
          <long-description/>
          <tag line="106" name="throws" description="When a query is invalid" type="\DatabaseQueryException">
            <type by_reference="false">\DatabaseQueryException</type>
          </tag>
          <tag line="106" name="param" description="MySQL query to execute" type="String" variable="$query">
            <type by_reference="false">String</type>
          </tag>
          <tag line="106" name="return" description="Numeric array of results, or false" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="114">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="127" package="database\mysqli">
        <name>getQueryInternal</name>
        <full_name>getQueryInternal</full_name>
        <docblock line="118">
          <description>Database Query
Returns all results as an associative array</description>
          <long-description/>
          <tag line="118" name="throws" description="When a query is invalid" type="\DatabaseQueryException">
            <type by_reference="false">\DatabaseQueryException</type>
          </tag>
          <tag line="118" name="param" description="MySQL Query to execute" type="String" variable="$query">
            <type by_reference="false">String</type>
          </tag>
          <tag line="118" name="param" description="MySQL Query type" type="\Constant" variable="$assoc">
            <type by_reference="false">\Constant</type>
          </tag>
          <tag line="118" name="return" description="Array of results or false" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$query</name>
          <default/>
          <type/>
        </argument>
        <argument line="127">
          <name>$assoc</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="179" package="database\mysqli">
        <name>getAffectedRows</name>
        <full_name>getAffectedRows</full_name>
        <docblock line="174">
          <description>Returns the amount of affected rows of the last query</description>
          <long-description/>
          <tag line="174" name="return" description="Count" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="193" package="database\mysqli">
        <name>getInsertID</name>
        <full_name>getInsertID</full_name>
        <docblock line="188">
          <description>Gets the last inputted ID</description>
          <long-description/>
          <tag line="188" name="return" description="Last ID or NULL" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="206" package="database\mysqli">
        <name>getMySQLiObject</name>
        <full_name>getMySQLiObject</full_name>
        <docblock line="201">
          <description>Get the MySQLi object related to this database abstractor</description>
          <long-description/>
          <tag line="201" name="return" description="related to this abstracted database" type="Object">
            <type by_reference="false">Object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="215" package="database\mysqli">
        <name>getTotalQueryCount</name>
        <full_name>getTotalQueryCount</full_name>
        <docblock line="210">
          <description>Get the number of queries executed on MySQLi databases</description>
          <long-description/>
          <tag line="210" name="return" description="of queries executed on MySQLi databases" type="\Number">
            <type by_reference="false">\Number</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="224" package="database\mysqli">
        <name>getAllQueries</name>
        <full_name>getAllQueries</full_name>
        <docblock line="219">
          <description>Get the array of query strings executed on all MySQLi databases</description>
          <long-description/>
          <tag line="219" name="return" description="of query string executed" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="238" package="database\mysqli">
        <name>clean</name>
        <full_name>clean</full_name>
        <docblock line="232">
          <description>Sanitises the given input</description>
          <long-description/>
          <tag line="232" name="param" description="Data to be sanitised" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="232" name="return" description="Sanitised data" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="238">
          <name>$string</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="247" package="database\mysqli">
        <name>closeConnection</name>
        <full_name>closeConnection</full_name>
        <docblock line="242">
          <description>Close the connection to the database</description>
          <long-description/>
          <tag line="242" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="modules/debug/Debug.php" hash="3294612ba50926639ffba317415c1fb7" package="Default">
    <docblock line="2">
      <description>Debugging Class for Framework.</description>
      <long-description>&lt;p&gt;Contains
common/useful debugging methods for aiding debugging&lt;/p&gt;</long-description>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="v1.0"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="21" package="debug">
      <extends/>
      <name>Debug</name>
      <full_name>\Debug</full_name>
      <docblock line="16">
        <description>Static debugger class</description>
        <long-description/>
        <tag line="16" name="package" description="debug"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="25" namespace="global" package="Default">
        <name>$timers</name>
        <default>array()</default>
        <docblock line="22">
          <description>Currently stored timers that record time passed, dictionary storage</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="29" namespace="global" package="Default">
        <name>$lineCount</name>
        <default>0</default>
        <docblock line="26">
          <description>Number of lines executed, only counted if line monitor is enabled</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="34" namespace="global" package="Default">
        <name>$executedLines</name>
        <default>array()</default>
        <docblock line="30">
          <description>Lines that have been executed with file, only populated if line monitor
is enabled</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="38" namespace="global" package="Default">
        <name>$enabled</name>
        <default>false</default>
        <docblock line="35">
          <description>Whether debugging is visible or not</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="51" package="debug">
        <name>timer</name>
        <full_name>timer</full_name>
        <docblock line="44">
          <description>A timer to track CPU time of parts of script</description>
          <long-description/>
          <tag line="44" name="param" description="ID for the timer" type="String" variable="$type">
            <type by_reference="false">String</type>
          </tag>
          <tag line="44" name="param" description="If true, it will work difference and output" type="Bool" variable="$output">
            <type by_reference="false">Bool</type>
          </tag>
          <tag line="44" name="return" description="NULL if output is false" type="Int">
            <type by_reference="false">Int</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
        <argument line="51">
          <name>$output</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="77" package="debug">
        <name>fdump</name>
        <full_name>fdump</full_name>
        <docblock line="71">
          <description>Displays a formatted var_dump</description>
          <long-description/>
          <tag line="71" name="param" description="To be dumped" type="Object" variable="$variable">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="71" name="return" description="" type="Void">
            <type by_reference="false">Void</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$variable</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="99" package="debug">
        <name>ddump</name>
        <full_name>ddump</full_name>
        <docblock line="94">
          <description>fdump with death/ deathdump that exits upon call</description>
          <long-description/>
          <tag line="94" name="param" description="variable&#9;The variable to dump before exiting" type="mixed" variable="$variable">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$variable</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="123" package="debug">
        <name>vdump</name>
        <full_name>vdump</full_name>
        <docblock line="117">
          <description>Returns a formatted var_dump</description>
          <long-description/>
          <tag line="117" name="param" description="To be dumped" type="Object" variable="$variable">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="117" name="return" description="" type="Void">
            <type by_reference="false">Void</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$variable</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="152" package="debug">
        <name>alert</name>
        <full_name>alert</full_name>
        <docblock line="145">
          <description>Alias to fdump
A leaf taken from JS</description>
          <long-description/>
          <tag line="145" name="param" description="To be dumped" type="Object" variable="$variable">
            <type by_reference="false">Object</type>
          </tag>
          <tag line="145" name="return" description="" type="Void">
            <type by_reference="false">Void</type>
          </tag>
        </docblock>
        <argument line="152">
          <name>$variable</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="168" package="debug">
        <name>getBacktrace</name>
        <full_name>getBacktrace</full_name>
        <docblock line="160">
          <description>Prints a usable debug backtrace</description>
          <long-description/>
          <tag line="160" name="param" description="NL&#9;&#9;New line type" type="string" variable="$NL">
            <type by_reference="false">string</type>
          </tag>
          <tag line="160" name="param" description="length&#9;Max length of trace" type="int" variable="$length">
            <type by_reference="false">int</type>
          </tag>
          <tag line="160" name="param" description="dbgMsg&#9;Message to display with the output" type="string" variable="$dbgMsg">
            <type by_reference="false">string</type>
          </tag>
          <tag line="160" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$NL</name>
          <default>"&lt;br /&gt;"</default>
          <type/>
        </argument>
        <argument line="168">
          <name>$length</name>
          <default>NULL</default>
          <type/>
        </argument>
        <argument line="168">
          <name>$dbgMsg</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="231" package="debug">
        <name>getLastExecutedLines</name>
        <full_name>getLastExecutedLines</full_name>
        <docblock line="225">
          <description>Gets most recently executed lines</description>
          <long-description/>
          <tag line="225" name="param" description="Max number of lines&#9;[default=NULL/ALL]" type="int" variable="$length">
            <type by_reference="false">int</type>
          </tag>
          <tag line="225" name="return" description="Array of lines" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="231">
          <name>$length</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="259" package="debug">
        <name>monitorLinesExecuted</name>
        <full_name>monitorLinesExecuted</full_name>
        <docblock line="254">
          <description>Monitor all lines executed</description>
          <long-description/>
          <tag line="254" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="268" package="debug">
        <name>tickLineMonitor</name>
        <full_name>tickLineMonitor</full_name>
        <docblock line="263">
          <description>Tick line monitor</description>
          <long-description/>
          <tag line="263" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="283" package="debug">
        <name>getExecutedLines</name>
        <full_name>getExecutedLines</full_name>
        <docblock line="278">
          <description>Get executed lines</description>
          <long-description/>
          <tag line="278" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="292" package="debug">
        <name>isLineMonitorEnabled</name>
        <full_name>isLineMonitorEnabled</full_name>
        <docblock line="287">
          <description>Check if lines are being monitored</description>
          <long-description/>
          <tag line="287" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="306" package="debug">
        <name>enabled</name>
        <full_name>enabled</full_name>
        <docblock line="300">
          <description>Whether to output debugging text at current execution.</description>
          <long-description/>
          <tag line="300" name="todo" description="Add permissions checking after moved into object"/>
          <tag line="300" name="return" description="" type="Boolean">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="313" package="debug">
        <name>enable</name>
        <full_name>enable</full_name>
        <docblock line="310">
          <description>Turn debug on</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="320" package="debug">
        <name>disable</name>
        <full_name>disable</full_name>
        <docblock line="317">
          <description>Turn debug off</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="modules/error/ErrorHandler.php" hash="04d3f02f2f7e8f134e8474ae043e4632" package="Default">
    <docblock line="2">
      <description>Class designated for handling PHP errors</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="error">
      <extends/>
      <name>ErrorHandler</name>
      <full_name>\ErrorHandler</full_name>
      <docblock line="9">
        <description>An error handler class for handling both PHP exceptions and custom ones</description>
        <long-description/>
        <tag line="9" name="package" description="error"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="18" namespace="global" package="Default">
        <name>$callback</name>
        <default/>
        <docblock line="15">
          <description>The callback that is called upon errors</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="22" namespace="global" package="Default">
        <name>$level</name>
        <default>NULL</default>
        <docblock line="19">
          <description>The level of errors that this handler handles</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="30" package="error">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="24">
          <description>Create this error handler</description>
          <long-description/>
          <tag line="24" name="param" description="callback&#9;Error handler callback" type="callback" variable="$callback">
            <type by_reference="false">callback</type>
          </tag>
          <tag line="24" name="param" description="level&#9;&#9;Level to handle for (uses E_ALL | E_STRICT by default)" type="int" variable="$level">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$callback</name>
          <default/>
          <type/>
        </argument>
        <argument line="30">
          <name>$level</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="error">
        <name>setLevel</name>
        <full_name>setLevel</full_name>
        <docblock line="34">
          <description>Set level to use</description>
          <long-description/>
          <tag line="34" name="param" description="level&#9;Level to handle for" type="int" variable="$level">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$level</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="46" package="error">
        <name>handleErrors</name>
        <full_name>handleErrors</full_name>
        <docblock line="43">
          <description>Set the error handler to this current one</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="66" package="error">
        <name>handleException</name>
        <full_name>handleException</full_name>
        <docblock line="57">
          <description>Default error exception handler</description>
          <long-description/>
          <tag line="57" name="param" description="errno&#9;The serverity of the error" type="int" variable="$errno">
            <type by_reference="false">int</type>
          </tag>
          <tag line="57" name="param" description="errstr&#9;The error string to log or display" type="string" variable="$errstr">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="param" description="errfile&#9;The file in which the error occurred" type="string" variable="$errfile">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="param" description="errline&#9;The line on which the error occurred" type="int" variable="$errline">
            <type by_reference="false">int</type>
          </tag>
          <tag line="57" name="throws" description="Always throws error exception" type="\ErrorException">
            <type by_reference="false">\ErrorException</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$errno</name>
          <default/>
          <type/>
        </argument>
        <argument line="66">
          <name>$errstr</name>
          <default/>
          <type/>
        </argument>
        <argument line="66">
          <name>$errfile</name>
          <default/>
          <type/>
        </argument>
        <argument line="66">
          <name>$errline</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="74" package="error">
        <name>throwExceptions</name>
        <full_name>throwExceptions</full_name>
        <docblock line="70">
          <description>Emit inbuild ErrorExceptions upon all exceptions
This overwrites any current exception handler</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="81" package="error">
        <name>reset</name>
        <full_name>reset</full_name>
        <docblock line="78">
          <description>Restore default PHP behaviour</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="modules/input/FileUpload.php" hash="6e17366c3ac849463849cdf6b18f540a" package="Default">
    <docblock line="2">
      <description>An abstract representation of a temporarily uploaded
file uploaded via the POST file upload mechanism</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="input">
      <extends/>
      <name>FileUpload</name>
      <full_name>\FileUpload</full_name>
      <docblock line="13">
        <description>File upload representation</description>
        <long-description/>
        <tag line="13" name="package" description="input"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="22" namespace="global" package="Default">
        <name>$name</name>
        <default/>
        <docblock line="19">
          <description>Name of the file upload in the $_FILES array</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="29" package="input">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="24">
          <description>Create a new file upload object</description>
          <long-description/>
          <tag line="24" name="param" description="Name of file upload in POST form" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="38" package="input">
        <name>exists</name>
        <full_name>exists</full_name>
        <docblock line="33">
          <description>Check if this is a valid file upload</description>
          <long-description/>
          <tag line="33" name="return" description="True if the file exists" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="input">
        <name>complete</name>
        <full_name>complete</full_name>
        <docblock line="42">
          <description>Check if this file upload completed successfully</description>
          <long-description/>
          <tag line="42" name="return" description="True if the file was successful" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="56" package="input">
        <name>getType</name>
        <full_name>getType</full_name>
        <docblock line="51">
          <description>Get the MIME type of the file</description>
          <long-description/>
          <tag line="51" name="return" description="MIME type of the image" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="70" package="input">
        <name>move</name>
        <full_name>move</full_name>
        <docblock line="60">
          <description>Move this file to a new location, it will
be deleted after this script is executed otherwise.</description>
          <long-description>&lt;p&gt;Will overwrite existing files.&lt;/p&gt;</long-description>
          <tag line="60" name="throws" description="Thrown when file cannot be found" type="\FileNotFoundException">
            <type by_reference="false">\FileNotFoundException</type>
          </tag>
          <tag line="60" name="throws" description="When the file cannot be moved" type="\IOException">
            <type by_reference="false">\IOException</type>
          </tag>
          <tag line="60" name="param" description="folder&#9;&#9;Folder to move file to" type="\Folder" variable="$folder">
            <type by_reference="false">\Folder</type>
          </tag>
          <tag line="60" name="param" description="name&#9;&#9;(Optional) Alternative file name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$folder</name>
          <default/>
          <type>\Folder</type>
        </argument>
        <argument line="70">
          <name>$name</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="modules/input/Get.php" hash="b3e3d0f5d792924744a2f261c79cab69" package="Default">
    <docblock line="2">
      <description>A class to abstract out some pains in using get values</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="input">
      <extends/>
      <name>Get</name>
      <full_name>\Get</full_name>
      <docblock line="9">
        <description>Get representation and interface</description>
        <long-description/>
        <tag line="9" name="package" description="input"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="23" package="input">
        <name>value</name>
        <full_name>value</full_name>
        <docblock line="15">
          <description>Get a get value with an optional default</description>
          <long-description/>
          <tag line="15" name="param" description="Name of post field" type="String" variable="$index">
            <type by_reference="false">String</type>
          </tag>
          <tag line="15" name="param" description="Default value" type="Mixed" variable="$default">
            <type by_reference="false">Mixed</type>
          </tag>
          <tag line="15" name="return" description="Default value or get field (if exists).&#10;&#9;&#9;&#9;&#9;&#9;String types are converted to String objects" type="Mixed">
            <type by_reference="false">Mixed</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$index</name>
          <default/>
          <type/>
        </argument>
        <argument line="23">
          <name>$default</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="42" package="input">
        <name>contains</name>
        <full_name>contains</full_name>
        <docblock line="36">
          <description>Check if the get contains the given value</description>
          <long-description/>
          <tag line="36" name="param" description="Name of get field" type="string" variable="$index">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="return" description="True if value is contained" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$index</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="modules/input/Post.php" hash="ad1a733580523ec47aa724cc4eacac88" package="Default">
    <docblock line="2">
      <description>A class to abstract out some pains in using post values</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="input">
      <extends/>
      <name>Post</name>
      <full_name>\Post</full_name>
      <docblock line="9">
        <description>Post representation and interface</description>
        <long-description/>
        <tag line="9" name="package" description="input"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="23" package="input">
        <name>value</name>
        <full_name>value</full_name>
        <docblock line="15">
          <description>Get a post value with an optional default</description>
          <long-description/>
          <tag line="15" name="param" description="Name of post field" type="string" variable="$index">
            <type by_reference="false">string</type>
          </tag>
          <tag line="15" name="param" description="Default value" type="Mixed" variable="$default">
            <type by_reference="false">Mixed</type>
          </tag>
          <tag line="15" name="return" description="Default value or post field (if exists).&#10;&#9;&#9;&#9;&#9;&#9;String types are converted to String objects" type="Mixed">
            <type by_reference="false">Mixed</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$index</name>
          <default/>
          <type/>
        </argument>
        <argument line="23">
          <name>$default</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="42" package="input">
        <name>contains</name>
        <full_name>contains</full_name>
        <docblock line="36">
          <description>Check if the post contains the given value</description>
          <long-description/>
          <tag line="36" name="param" description="Name of post field" type="string" variable="$index">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="return" description="True if value is contained" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$index</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="modules/io/File.php" hash="bde287faf20a6ed099e3ed2e7724cfa0" package="Default">
    <docblock line="2">
      <description>Representation of a file in PHP</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="17" package="io">
      <extends/>
      <name>File</name>
      <full_name>\File</full_name>
      <docblock line="12">
        <description>File representation</description>
        <long-description/>
        <tag line="12" name="package" description="io"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="21" namespace="global" package="Default">
        <name>$path</name>
        <default/>
        <docblock line="18">
          <description>Path of the file</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="io">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="23">
          <description>Create a new file at a given path</description>
          <long-description/>
          <tag line="23" name="param" description="path&#9;Path of the file we are representing" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$path</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="37" package="io">
        <name>exists</name>
        <full_name>exists</full_name>
        <docblock line="32">
          <description>Check if this file exists</description>
          <long-description/>
          <tag line="32" name="return" description="True if this file exists (and is not a folder)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="46" package="io">
        <name>__toString</name>
        <full_name>__toString</full_name>
        <docblock line="41">
          <description>Tostring returns the current path value</description>
          <long-description/>
          <tag line="41" name="return" description="Path" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="modules/io/FileNotFoundException.php" hash="23dd536874f47e2510c8ce885762b1e8" package="Default">
    <docblock line="2">
      <description>File not found exception</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="16" package="io">
      <extends>\IOException</extends>
      <name>FileNotFoundException</name>
      <full_name>\FileNotFoundException</full_name>
      <docblock line="11">
        <description>Exception to throw when a file isn't found</description>
        <long-description/>
        <tag line="11" name="package" description="io"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="23" package="io">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="17">
          <description>Create a new class not found exception for the given class and message</description>
          <long-description/>
          <tag line="17" name="param" description="message&#9;&#9;Message for developer" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="17" name="param" description="file&#9;&#9;File that was missing" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="23">
          <name>$file</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="modules/io/Folder.php" hash="f983ae25635880fe7824a570cdbc8522" package="Default">
    <docblock line="2">
      <description>A representation of a folder as an extention of a file</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="io">
      <extends>\File</extends>
      <name>Folder</name>
      <full_name>\Folder</full_name>
      <docblock line="13">
        <description>Representation of a folder</description>
        <long-description/>
        <tag line="13" name="package" description="io"/>
      </docblock>
      <constant namespace="global" line="22" package="io">
        <name>FOLDER</name>
        <full_name>FOLDER</full_name>
        <value>1</value>
        <docblock line="19">
          <description>Folder mask</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="26" package="io">
        <name>FILE</name>
        <full_name>FILE</full_name>
        <value>2</value>
        <docblock line="23">
          <description>File mask</description>
          <long-description/>
        </docblock>
      </constant>
      <constant namespace="global" line="30" package="io">
        <name>INCLUDE_DOT_FOLDERS</name>
        <full_name>INCLUDE_DOT_FOLDERS</full_name>
        <value>4</value>
        <docblock line="27">
          <description>Include ., .</description>
          <long-description>&lt;p&gt;. folders, does not include hidden files/folders&lt;/p&gt;</long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="37" package="io">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="32">
          <description>Create this representation of a folder</description>
          <long-description/>
          <tag line="32" name="param" description="folder&#9;&#9;Folder path" type="string" variable="$folder">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$folder</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="io">
        <name>getFile</name>
        <full_name>getFile</full_name>
        <docblock line="46">
          <description>Get a file from within this folder</description>
          <long-description/>
          <tag line="46" name="param" description="filename&#9;File name" type="string" variable="$filename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="return" description="File from within this folder" type="\File">
            <type by_reference="false">\File</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="62" package="io">
        <name>getFolder</name>
        <full_name>getFolder</full_name>
        <docblock line="56">
          <description>Get a folder from within this folder</description>
          <long-description/>
          <tag line="56" name="param" description="folderName&#9;Folder name" type="string" variable="$folderName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="56" name="return" description="The folder from within this folder" type="\Folder">
            <type by_reference="false">\Folder</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$folderName</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="73" package="io">
        <name>getFolderList</name>
        <full_name>getFolderList</full_name>
        <docblock line="66">
          <description>Get the listing of all folders in this directory</description>
          <long-description/>
          <tag line="66" name="throws" description="When the directory doesn't exist" type="\FileNotFoundException">
            <type by_reference="false">\FileNotFoundException</type>
          </tag>
          <tag line="66" name="throws" description="When an error reading occurs" type="\IOException">
            <type by_reference="false">\IOException</type>
          </tag>
          <tag line="66" name="return" description="An array of folder objects" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="84" package="io">
        <name>getFileList</name>
        <full_name>getFileList</full_name>
        <docblock line="77">
          <description>Get the listing of all files in this directory</description>
          <long-description/>
          <tag line="77" name="throws" description="When the directory doesn't exist" type="\FileNotFoundException">
            <type by_reference="false">\FileNotFoundException</type>
          </tag>
          <tag line="77" name="throws" description="When an error reading occurs" type="\IOException">
            <type by_reference="false">\IOException</type>
          </tag>
          <tag line="77" name="return" description="An array of File objects" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="96" package="io">
        <name>getListing</name>
        <full_name>getListing</full_name>
        <docblock line="88">
          <description>Get the listing of objects in this folder based on a mask</description>
          <long-description/>
          <tag line="88" name="throws" description="When the directory doesn't exist" type="\FileNotFoundException">
            <type by_reference="false">\FileNotFoundException</type>
          </tag>
          <tag line="88" name="throws" description="When an error reading occurs" type="\IOException">
            <type by_reference="false">\IOException</type>
          </tag>
          <tag line="88" name="param" description="The mask of which objects to list, default is everything&#10;&#9;&#9;&#9;&#9;except . and .." type="\mask" variable="$mask">
            <type by_reference="false">\mask</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$mask</name>
          <default>3</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="io">
        <name>isDotFolder</name>
        <full_name>isDotFolder</full_name>
        <docblock line="125">
          <description>Check if the given folder is a dot folder, .</description>
          <long-description>&lt;p&gt;or .., which represent the
current folder and the parent folders respectively. Does not match
Unix hidden folders (.foldername)&lt;/p&gt;</long-description>
          <tag line="125" name="return" description="if the folder location is  a . or .. folder" type="True">
            <type by_reference="false">True</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="142" package="io">
        <name>exists</name>
        <full_name>exists</full_name>
        <docblock line="137">
          <description>Check if this folder exists</description>
          <long-description/>
          <tag line="137" name="return" description="True if exists" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="149" package="io">
        <name>mkdir</name>
        <full_name>mkdir</full_name>
        <docblock line="146">
          <description>Create the directory</description>
          <long-description/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="156" package="io">
        <name>create</name>
        <full_name>create</full_name>
        <docblock line="153">
          <description>Create the directory</description>
          <long-description/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="modules/io/IOException.php" hash="16aa64a5e4d03afb32ecf560bb890f6b" package="Default">
    <docblock line="2">
      <description>Thrown upon an IO exception occuring</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="13" package="io">
      <extends>\Exception</extends>
      <name>IOException</name>
      <full_name>\IOException</full_name>
      <docblock line="8">
        <description>IOException that represents an exception caused by IO interruption</description>
        <long-description/>
        <tag line="8" name="package" description="io"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="20" package="io">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="14">
          <description>Create an IOException with the given message and optional cause</description>
          <long-description/>
          <tag line="14" name="param" description="message&#9;&#9;Message" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="14" name="param" description="case&#9;&#9;(Optional) Cause" type="\Exception" variable="$cause">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="20">
          <name>$message</name>
          <default/>
          <type/>
        </argument>
        <argument line="20">
          <name>$cause</name>
          <default>NULL</default>
          <type>\Exception</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="modules/layout/Layout.php" hash="b0736e456aee6d143f2930658106302a" package="Default">
    <docblock line="2">
      <description>A PHP template class that loads templates written in PHP in an object
oriented manner.</description>
      <long-description>&lt;p&gt;An example can be found in the examples folder.&lt;/p&gt;</long-description>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <include line="72" type="Include" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="18" package="layout">
      <extends/>
      <name>Layout</name>
      <full_name>\Layout</full_name>
      <docblock line="13">
        <description>PHP Templating layout class</description>
        <long-description/>
        <tag line="13" name="package" description="layout"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="22" namespace="global" package="Default">
        <name>$file</name>
        <default/>
        <docblock line="19">
          <description>The file for this layout</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$variables</name>
        <default>array()</default>
        <docblock line="23">
          <description>Variables for this layout</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="layout">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="28">
          <description>Create a new layout with the given file</description>
          <long-description/>
          <tag line="28" name="param" description="file&#9;The layout file" type="\File" variable="$file">
            <type by_reference="false">\File</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$file</name>
          <default/>
          <type>\File</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="layout">
        <name>addVariable</name>
        <full_name>addVariable</full_name>
        <docblock line="37">
          <description>Add a new variable to the layout symbol table.</description>
          <long-description>&lt;p&gt;Reserved names:
_file, standard PHP reserved names.&lt;/p&gt;</long-description>
          <tag line="37" name="param" description="name&#9;Name of variable" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="value&#9;Value of the variable" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="44">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="53" package="layout">
        <name>addVariables</name>
        <full_name>addVariables</full_name>
        <docblock line="48">
          <description>Add an array of variables.</description>
          <long-description>&lt;p&gt;Variables with the same key will use the newer value&lt;/p&gt;</long-description>
          <tag line="48" name="param" description="variables&#9;An array of key value pairs following addVariable parameters" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$variables</name>
          <default/>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="62" package="layout">
        <name>display</name>
        <full_name>display</full_name>
        <docblock line="57">
          <description>Output this template by including the template</description>
          <long-description/>
          <tag line="57" name="throws" description="If the file cannot be found" type="\FileNotFoundException">
            <type by_reference="false">\FileNotFoundException</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="modules/locale/Language.php" hash="08790ed245a1e76d3cb1b6c522953649" package="Default">
    <docblock line="2">
      <description>A language identifier.</description>
      <long-description>&lt;p&gt;Languages only "exist" if you create it&lt;/p&gt;</long-description>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1.0"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="locale">
      <extends/>
      <name>Language</name>
      <full_name>\Language</full_name>
      <docblock line="9">
        <description>A representation of a language</description>
        <long-description/>
        <tag line="9" name="package" description="locale"/>
      </docblock>
      <property final="false" static="true" visibility="private" line="18" namespace="global" package="Default">
        <name>$languages</name>
        <default>array()</default>
        <docblock line="15">
          <description>Languages that are known to be in use</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="23" namespace="global" package="Default">
        <name>$code</name>
        <default/>
        <docblock line="20">
          <description>Identifier of this language</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="30" package="locale">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="25">
          <description>Create a new language</description>
          <long-description/>
          <tag line="25" name="param" description="lang&#9;Language ID, preferably an ISO language code" type="string" variable="$lang">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$lang</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="42" package="locale">
        <name>getLanguageCode</name>
        <full_name>getLanguageCode</full_name>
        <docblock line="37">
          <description>Get the ID of this language</description>
          <long-description/>
          <tag line="37" name="return" description="ID of this language" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="52" package="locale">
        <name>languageExists</name>
        <full_name>languageExists</full_name>
        <docblock line="46">
          <description>Check if a language exists.</description>
          <long-description/>
          <tag line="46" name="param" description="lang&#9;Language code" type="string" variable="$lang">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="return" description="if the language is has been created" type="True">
            <type by_reference="false">True</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$lang</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="62" package="locale">
        <name>getLanguage</name>
        <full_name>getLanguage</full_name>
        <docblock line="56">
          <description>Get a language given by an ID</description>
          <long-description/>
          <tag line="56" name="param" description="lang&#9;Language code" type="string" variable="$lang">
            <type by_reference="false">string</type>
          </tag>
          <tag line="56" name="return" description="language object" type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$lang</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="77" package="locale">
        <name>createLanguage</name>
        <full_name>createLanguage</full_name>
        <docblock line="71">
          <description>Create a given language</description>
          <long-description/>
          <tag line="71" name="param" description="lang&#9;Language code" type="string" variable="$lang">
            <type by_reference="false">string</type>
          </tag>
          <tag line="71" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$lang</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="modules/locale/MissingPhraseException.php" hash="d9efda71cc971d571638d91d3d0a435e" package="Default">
    <docblock line="2">
      <description>An attempt to access a missing phrase</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="locale">
      <extends>\MissingResourceException</extends>
      <name>MissingPhraseException</name>
      <full_name>\MissingPhraseException</full_name>
      <docblock line="9">
        <description>Exception thrown when a phrase is missing</description>
        <long-description/>
        <tag line="9" name="package" description="locale"/>
      </docblock>
    </class>
  </file>
  <file path="modules/locale/MissingPhraseMapException.php" hash="1d98535c661ed19318e775639918c7f3" package="Default">
    <docblock line="2">
      <description>Phrase map file is missing</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="1"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="locale">
      <extends>\MissingResourceException</extends>
      <name>MissingPhraseMapException</name>
      <full_name>\MissingPhraseMapException</full_name>
      <docblock line="9">
        <description>Exception thrown when a phrase map is missing</description>
        <long-description/>
        <tag line="9" name="package" description="locale"/>
      </docblock>
    </class>
  </file>
  <file path="modules/locale/PhraseMap.php" hash="4739b87abc0c958a6e7f23c0b2dc516f" package="Default">
    <docblock line="2">
      <description>A map of phrases identified by an ID and parsed from a file</description>
      <long-description/>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="2"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="18" package="locale">
      <extends/>
      <name>PhraseMap</name>
      <full_name>\PhraseMap</full_name>
      <docblock line="13">
        <description>A map of phrases loaded from a given file</description>
        <long-description/>
        <tag line="13" name="package" description="locale"/>
      </docblock>
      <constant namespace="global" line="30" package="locale">
        <name>DEFAULT_LANG_INDEX</name>
        <full_name>DEFAULT_LANG_INDEX</full_name>
        <value>''</value>
        <docblock line="27">
          <description>Default phrase index</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="private" line="22" namespace="global" package="Default">
        <name>$curLang</name>
        <default/>
        <docblock line="19">
          <description>The current language</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$phrases</name>
        <default>array()</default>
        <docblock line="23">
          <description>The store of phrases for this map</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="locale">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="32">
          <description>Create a phrase map from the given file</description>
          <long-description/>
          <tag line="32" name="throws" description="When a phrase map is missing or damaged" type="\MissingPhraseMapException">
            <type by_reference="false">\MissingPhraseMapException</type>
          </tag>
          <tag line="32" name="param" description="File name, will be treated as XML" type="String" variable="$file">
            <type by_reference="false">String</type>
          </tag>
          <tag line="32" name="param" description="The language of this file" type="\Language" variable="$lang">
            <type by_reference="false">\Language</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$file</name>
          <default/>
          <type/>
        </argument>
        <argument line="39">
          <name>$lang</name>
          <default/>
          <type>\Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="57" package="locale">
        <name>getPhrase</name>
        <full_name>getPhrase</full_name>
        <docblock line="48">
          <description>Return a phrase based on the current language or given alternate
language</description>
          <long-description/>
          <tag line="48" name="param" description="Text element ID" type="String" variable="$phraseID">
            <type by_reference="false">String</type>
          </tag>
          <tag line="48" name="param" description="Alternate language to get phrase for (as opposed to current language)&#10;&#9;&#9;&#9;&#9;&#9;&#9;(use setLanguage instead if possible)" type="\Language" variable="$altLang">
            <type by_reference="false">\Language</type>
          </tag>
          <tag line="48" name="return" description="The formatted output or &quot;Invalid element specified&quot;;" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$phraseID</name>
          <default/>
          <type/>
        </argument>
        <argument line="57">
          <name>$altLang</name>
          <default>NULL</default>
          <type>\Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="82" package="locale">
        <name>getLanguage</name>
        <full_name>getLanguage</full_name>
        <docblock line="77">
          <description>Get the current language code</description>
          <long-description/>
          <tag line="77" name="return" description="language for this phrase map" type="\The">
            <type by_reference="false">\The</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="95" package="locale">
        <name>setLanguage</name>
        <full_name>setLanguage</full_name>
        <docblock line="90">
          <description>Set the current language</description>
          <long-description/>
          <tag line="90" name="param" description="Current language" type="\Language" variable="$lang">
            <type by_reference="false">\Language</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$lang</name>
          <default/>
          <type>\Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="109" package="locale">
        <name>phraseExists</name>
        <full_name>phraseExists</full_name>
        <docblock line="103">
          <description>Checks if an phrase exists</description>
          <long-description/>
          <tag line="103" name="param" description="Phrase name" type="String" variable="$phraseID">
            <type by_reference="false">String</type>
          </tag>
          <tag line="103" name="return" description="True if the phrase exists" type="Boolean">
            <type by_reference="false">Boolean</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$phraseID</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="124" package="locale">
        <name>loadFile</name>
        <full_name>loadFile</full_name>
        <docblock line="117">
          <description>Loads file into the language memory for the current language</description>
          <long-description/>
          <tag line="117" name="throws" description="When a phrase map is missing or damaged" type="\MissingPhraseMapException">
            <type by_reference="false">\MissingPhraseMapException</type>
          </tag>
          <tag line="117" name="param" description="File name" type="String" variable="$filename">
            <type by_reference="false">String</type>
          </tag>
          <tag line="117" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$filename</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="157" package="locale">
        <name>parseLocaleElement</name>
        <full_name>parseLocaleElement</full_name>
        <docblock line="151">
          <description>Parse the phrases into the phrases list</description>
          <long-description/>
          <tag line="151" name="param" description="The element to parse" type="\SimpleXMLElement" variable="$elem">
            <type by_reference="false">\SimpleXMLElement</type>
          </tag>
          <tag line="151" name="param" description="The name of this phrase" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="157">
          <name>$elem</name>
          <default/>
          <type>\SimpleXMLElement</type>
        </argument>
        <argument line="157">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="modules/logging/Logger.php" hash="e02c11f772e03e22c33a07ade4af57f4" package="Default">
    <docblock line="2">
      <description>Logging Class.</description>
      <long-description>&lt;p&gt;Creates regular logs&lt;/p&gt;</long-description>
      <tag line="2" name="author" description="Clinton Alexander"/>
      <tag line="2" name="version" description="v1.0"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="logging">
      <extends/>
      <name>Logger</name>
      <full_name>\Logger</full_name>
      <docblock line="9">
        <description>A logger for creating logs</description>
        <long-description/>
        <tag line="9" name="package" description="logging"/>
      </docblock>
      <constant namespace="global" line="52" package="logging">
        <name>MAX_LOG_SIZE</name>
        <full_name>MAX_LOG_SIZE</full_name>
        <value>5000</value>
        <docblock line="49">
          <description>Maximum log size in kB</description>
          <long-description/>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="18" namespace="global" package="Default">
        <name>$logName</name>
        <default/>
        <docblock line="15">
          <description>Name of the log, will be used in the file name</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="22" namespace="global" package="Default">
        <name>$logDir</name>
        <default/>
        <docblock line="19">
          <description>Directory to store this log</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="26" namespace="global" package="Default">
        <name>$logLoc</name>
        <default/>
        <docblock line="23">
          <description>Log location, depends on the logName and logDir</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="30" namespace="global" package="Default">
        <name>$rotateMax</name>
        <default/>
        <docblock line="27">
          <description>Maximum number of times to rotate the log file</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="34" namespace="global" package="Default">
        <name>$maxLogSize</name>
        <default/>
        <docblock line="31">
          <description>Maximum filesize of the log in kB</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" namespace="global" package="Default">
        <name>$log</name>
        <default/>
        <docblock line="35">
          <description>Current log text</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="43" namespace="global" package="Default">
        <name>$defaultMaxSize</name>
        <default>2048</default>
        <docblock line="40">
          <description>Default max log size in bytes</description>
          <long-description/>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="47" namespace="global" package="Default">
        <name>$defaultMaxRotate</name>
        <default>5</default>
        <docblock line="44">
          <description>Default number of rotations before overwriting</description>
          <long-description/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="60" package="logging">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="54">
          <description>Creates a logger for logName</description>
          <long-description/>
          <tag line="54" name="param" description="Logname" type="String" variable="$logName">
            <type by_reference="false">String</type>
          </tag>
          <tag line="54" name="param" description="Directory to save log file to" type="String" variable="$logDir">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$logName</name>
          <default/>
          <type/>
        </argument>
        <argument line="60">
          <name>$logDir</name>
          <default>"./"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="77" package="logging">
        <name>setRotationLength</name>
        <full_name>setRotationLength</full_name>
        <docblock line="72">
          <description>Change the current rotation size</description>
          <long-description/>
          <tag line="72" name="param" description="New rotation max size" type="String" variable="$length">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$length</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="86" package="logging">
        <name>setMaxLogSize</name>
        <full_name>setMaxLogSize</full_name>
        <docblock line="81">
          <description>Change the current max log size</description>
          <long-description/>
          <tag line="81" name="param" description="New maximum log file size" type="String" variable="$max">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$max</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="95" package="logging">
        <name>setDefaultRotationLength</name>
        <full_name>setDefaultRotationLength</full_name>
        <docblock line="90">
          <description>Change the default max size</description>
          <long-description/>
          <tag line="90" name="param" description="Default max size" type="String" variable="$length">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$length</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="104" package="logging">
        <name>setDefaultMaxLogSize</name>
        <full_name>setDefaultMaxLogSize</full_name>
        <docblock line="99">
          <description>Change the default max log size</description>
          <long-description/>
          <tag line="99" name="param" description="Default max log size" type="String" variable="$max">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$max</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="119" package="logging">
        <name>log</name>
        <full_name>log</full_name>
        <docblock line="112">
          <description>Log data to EOF</description>
          <long-description/>
          <tag line="112" name="param" description="text&#9;&#9;Level of severity" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="param" description="severity&#9;The text for the severity of the log entry" type="string" variable="$severity">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
        <argument line="119">
          <name>$severity</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="135" package="logging">
        <name>read</name>
        <full_name>read</full_name>
        <docblock line="130">
          <description>Reads log file</description>
          <long-description/>
          <tag line="130" name="return" description="text" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="153" package="logging">
        <name>append</name>
        <full_name>append</full_name>
        <docblock line="147">
          <description>Append to current log</description>
          <long-description/>
          <tag line="147" name="param" description="" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="147" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="153">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="170" package="logging">
        <name>delete</name>
        <full_name>delete</full_name>
        <docblock line="165">
          <description>Deletes current log</description>
          <long-description/>
          <tag line="165" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="182" package="logging">
        <name>create</name>
        <full_name>create</full_name>
        <docblock line="176">
          <description>Creates log for current log name</description>
          <long-description/>
          <tag line="176" name="param" description="Text to start with [default=Empty string]" type="String" variable="$text">
            <type by_reference="false">String</type>
          </tag>
          <tag line="176" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="182">
          <name>$text</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="197" package="logging">
        <name>rotate</name>
        <full_name>rotate</full_name>
        <docblock line="191">
          <description>Rotates log</description>
          <long-description/>
          <tag line="191" name="param" description="Text for new log&#9;[" type="String" variable="$text">
            <type by_reference="false">String</type>
          </tag>
          <tag line="191" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="197">
          <name>$text</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <package name="CleanPHP" full_name="CleanPHP"/>
  <package name="Default" full_name="Default"/>
  <package name="config" full_name="config"/>
  <package name="core" full_name="core"/>
  <package name="database" full_name="database">
    <package name="mysqli" full_name="database\mysqli"/>
  </package>
  <package name="debug" full_name="debug"/>
  <package name="error" full_name="error"/>
  <package name="input" full_name="input"/>
  <package name="io" full_name="io"/>
  <package name="layout" full_name="layout"/>
  <package name="locale" full_name="locale"/>
  <package name="logging" full_name="logging"/>
  <namespace name="global" full_name="global"/>
  <marker count="1">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
